---
title: "Spatially Distorted Signaling Wind Infrastructre"
author: "Sofia Ingersoll"
format: html
editor: visual
---

In this documentation, the data utilized is the [US Wind Data](https://dataverse.harvard.edu/file.xhtml?fileId=7339850&version=1.0), this data is associated with the "Replication Data for: Prevalence and predictors of wind energy opposition in North America",\[[doi](https://doi.org/10.7910/DVN/LE2V0R){.uri}\] Harvard Dataverse, V1, 2023. The collaborators on that project include: Stokes, Leah; Franzblau, Emma; Lovering, Jessica R.; Miljanich, Chris.

Analysis of these areas will provide insight into local resistance and spatially distorted signalling in relation to wind power infrastructure and climate policy.

\~ include more about what the data is about and the outcomes of making visualization \~

Main Takeaways:

-   Linear Regression Models are not always the answer

-   Dude, That's Logit!

-   What in the Log Odds?

-   Binary Predictions for Binary Variables

### Loading Libraries

The following libraries were selected based on their functionality and ability to optimize our data for mapping.

```{r, message = FALSE}
# Loading Libraries
library(tidyverse)        # essential r package 
library(sf)               # package simplifies spatial dataframes
library(cowplot)
library(spData)
library(raster)
library(ggspatial)
library(prettymapr)
library(ggmap)
library(naniar)
library(gt)
library(tmap)
library(terra)
library(patchwork)
library(broom)
library(stars)
library(devtools)
library(maptiles)
library(smoothr)          # aesthetic and visual aid for buffers created
```

### Read in the Data

To simplify the following step, it is important to organize your folders in a way that makes sense for your workflow. In many cases, the data sets we work with are typically too large to be uploaded to GitHub. As a result, a common practice is storing your data in a folder, directly outside of your repository in a folder labeled "data".

The code chunk below for `read.csv` demonstrates how to exit your current location using `..` and enter the desired folder location using `/`. It is important that your file path does not contain any spaces and is directly reflective of the file path for the data you wish to read in.

#### U.S. Wind Data

```{r message = FALSE}
# reading in & storing data
wind_data <- read.csv("../data/wind_data/wind_data_usa.csv")  
```

##### Confirm the Data Loaded Properly

```{r}
head(wind_data)                  # displays the first 6 rows of the data
```

## Wrangling & Subsetting

### **Converting lat/long into Raster Data (i.e. sticky geometries)**

Below we will use the package `sf` to convert the lat/long data into a raster geometry column. In this single line, we will also be assigning the CRS EPSG:4326 to the sf data frame. Coordinate Reference Systems, CRS, are required in order for the data to be projected onto a map. The CRS was selected because it provides a relatively proportionate display of the United States. We are open to suggestions regarding our CRS if a different project better fits our data.

```{r message = FALSE}
wind_sf <- wind_data %>%             # calls desired dataset
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) 
                                     # creates geometry column with desired crs 

glimpse(crs(wind_sf))                  # output should reveal WGS84, EPSG:4326
```

#### Check-point

Let's stop and see if our outputs are what we expect.

Were the lat/long columns correctly converted into a geometry column?

`setdiff()` is a way to quickly determine the differences between two data sets.

```{r}
setdiff(colnames(wind_data), colnames(wind_sf))
setdiff(colnames(wind_sf), colnames(wind_data))
```

### Initial Visualization of the Data

Using the base R function `plot()`, we can see that the geometries stored by this data set correlate to the locations of wind infrastructure plants throughout the United States. In order to visualize these locations with respect to state and county jurisdictions, we'll need to utilize another data set to create a base layer for our map.

```{r message = FALSE}
# First visual of the U.S. wind data provided by the geometry points
wind_plants <- ggplot(wind_sf) +
  annotation_map_tile(type = "osm") +
  geom_sf(col = 'darkgreen',
          alpha = 0.5,
          size = 3) 

wind_plants
```

# Linear Regression Models

### Variables of Interest:

| Name         | Description                                                                                                                             |
|------------------------------------|------------------------------------|
| status       | Describes the project operating status. In this study, we have converted it into a binary variable: 1 is operating, 0 is not_operating. |
| pop_den      | Tract-level 2010 census data for population density (per mi\^2)                                                                         |
| med_inc      | Tract-level 2010 census data for median income                                                                                          |
| is_anti_wind | Binary measure of wind opposition                                                                                                       |

An attribute from each column will be used to run several multivariate linear regression models. This is to assess the effects of socioeconmic/regional influences on wind infrastructure and the estimated likelihood of participating legislative action when living within a 3km proximity of a wind plant.

## Determining Variable Assignments for OLS

```{r}
unique(wind_sf$status)     # displays unique values in this
```

### Need to rename status output variables

```{r}
# creating two categories: operating & not_operating
# We are removing 'Operating | Decommissioned' because it skews the data
unwanted_status <- "Operating | Decommissioned"
replacement_status <- "Uncertain Status"
wind_sf$status[wind_sf$status== unwanted_status]<-"Uncertain Status"  

# were we successful ?
unique(wind_sf$status)     # displays unique values in this

# cleaning out NAs for OLS
wind_sf <- wind_sf %>%
  filter(is.na(status) == 'FALSE') %>% 
  filter(is.na(is_anti_wind) == 'FALSE') %>% 
  filter(is.na(pop_den) == 'FALSE') %>% 
  filter(is.na(med_inc) == 'FALSE') %>% 
  filter(is.na(median_age) == 'FALSE') %>% 
  filter(is.na(n_turbs) == 'FALSE')

# were we successful ?
unique(wind_sf$status)     # displays unique values in this

# if_else preserves the data type but replaces unwanted values
wind_us <- wind_sf %>% 
  mutate(status = if_else(
    status %in% c('Cancelled', 'Out of service (temporarily)', 'Standby', 'Decommissioned', 'Uncertain Status'), 'not_operating',
    'operating') 
  )

# are our only outputs "operating" and "not_operating"?
print(unique(wind_us$status))

# status as factor and reassigned values
wind_us <- wind_us %>% 
  mutate(status = case_when(status == "operating" ~ 1,
            status == "not_operating" ~ 0))

# are our only outputs 0 or 1?
print(unique(wind_us$status))
```

Binary variable will be `status` column: `opertating` is 1, and `not_operating` will be 0.

## Dude, that's Logit!

### Initial Visualization of Categorical Response Variable

Our initial visualization demonstrates a correlation between smaller population density and wind infrastructure plants operating. This is likely associated with weight placed on voters in regions with smaller demographics. Local mobilization of minority opinion holders in these regions have a greater availability to push back against policymakers. However, this visual does not encapsulate all of the necessary information required to determine this with full certainty.

```{r}
# visualization of relationship
jitter_plot <- ggplot(data = wind_us, 
                      aes(x = pop_den,
                          y = status)) + 
  geom_jitter(col = 'plum',
              fill = "purple",
              width = 0,
              height = 0.05,
              alpha = 0.45,
              size = 6) +
  labs(title = "Population Density & Wind Infrastructure Activation Status",
       x = "Population Density",
       y = "Wind Infrastructure Operating Status")

jitter_plot

# useful information
summary(wind_us$pop_den)
```

## Logistic Regressions with Binomial Family:

### Binary Dependent Variable

$$ \text{status}\ = \beta_0 + \beta_1 \text{pop_den}\_i + \varepsilon_i $$

-   Our summary table describes a null deviance `362.60`.(`1178 df`) and residual deviance `362.22` (`1177 df`).

-   A p-value of `0.593` for $\beta_1$, is greater than the significant value of 0.05, therefore, the model hypothesis that operation status is influenced by population density holds.

-   However, I am still not convinced there isn't a correlation shared with another factor, so let's explore how our numbers change as we incorporate more variables into our equation later on.

```{r}
# Inital regression 1 betas for null
# function
status <- glm(status ~ pop_den,
                       wind_us,
                       family = 'binomial')
# summary to access coefficients
status1 <- summary(glm(status ~ pop_den,
                       wind_us,
                       family = 'binomial'))

# show me a summary table 
status1
```

## What in the Log Odds?

So far, we haven't been able to gather very much useful information to describe our model predictions. If this were a typical OLS, our model would be telling us:

-   When wind turbines are operational, and all other variables are held constant at 0, the $\beta_0$ represents the estimated likelihood that `status` of a wind infrastructure plant is `operating` is \~ `3.27`.

<!-- -->

-   $\beta_1$ tells us there is an estimated increase of `1.79e-04` in probability that status would be `operating` for the average unit increase in `pop_den`.

Since we're working with a binomial family, the p-values produced in the `glm()` need to be further extrapolated before they may be used to interpret our model.

Our model that we just fit tells us that:

#### $$logit(p)=log( p / 1−p)=β0+β1x+ε$$

so then, to solve for p:

$$
p̂=e^(β0+β1x1+eβ0+β1x)
$$

Alternatively, we're going to solve for p using $R^2$ because that looks gross. The `uniroot` function searches over the provided interval to find the zero value of the function provided. We pass the expression that should equal zero, and it finds us the p that ensures it equals zero.

### Finding p

Utilizing the funky relationship described above, we can solve for a range of p values using $R^2$. We're curious about the probability of `operating` wind plants for Population Density at `20,000`, `6,000`, and `600.` H

```{r}
# creating a function to to describe the logistic regression model
# 100,000 
fun <- function(p) {
  (1 - p)*exp(status1$coefficients[1,'Estimate'] + (status1$coefficients[2,'Estimate']*20000)) - p
}

# 
uniroot(fun, interval = c(0,1))$root

# 26000
fun <- function(p) {
  (1 - p)*exp(status1$coefficients[1,'Estimate'] + (status1$coefficients[2,'Estimate']*6000)) - p
}

# 
uniroot(fun, interval = c(0,1))$root

# 6000
fun <- function(p) {
  (1 - p)*exp(status1$coefficients[1,'Estimate'] + (status1$coefficients[2,'Estimate']*600)) - p
}

# 
uniroot(fun, interval = c(0,1))$root
```

### Logistic Regression Visualization

This visual is very interesting and definitely explains why the $R^2$ value is only giving values in the 0.9 range. Since our data contains a significant number of `operating` wind plants for a wide range of population densities, the regression model is producing a fit according to the `operating` status. The values in the `not_opertating` status appear to be considered similar to that of an outlier.

```{r warning = FALSE, error = FALSE, message = FALSE, echo = FALSE}
jitter_plot  + 
  geom_smooth(method = "lm",
              se = FALSE,
              color = 'blue') + 
  geom_smooth(method = "glm",
              se = FALSE,
              color = "hotpink",
              size = 1,
              method.args = list(family = "binomial"))
## `geom_smooth()` using formula = 'y ~ x'
## `geom_smooth()` using formula = 'y ~ x'
```

### Interpreting Coefficients Using Odds Ratio

To better interpret this relationship, we are going to change the scale of the variable on the y-axis. Now, we will be considering the odds, rather than the probability. While these two concepts are often conflated, they are not the same\[[2](https://tcarleton.github.io/EDS-222-stats/labs/06-week-six/week-6-lab-answers.html)\]. They are however, related by the simple formula below.

The **odds** of a binary event are the ratio of how often it happens, to how often it doesn't happen.

$odds(p̂)=p̂1−p̂=exp(β̂0+β̂1⋅x)$

We're going create an `odds_hat` variable for predicted odds. The ratio of the odds *after* a single unit increase in x to the odds *before* that one unit change is equal to eβ1. **Notice this doesn't depend on** x anymore! Therefore, it's a useful interpretation of coefficients.

```{r}
status_popden_predicted_odds <-  status %>%
  augment(type.predict = "response") %>%
  mutate(y_hat = .fitted) %>% 
  mutate(odds_hat = y_hat / (1 - y_hat)) %>% 
  gt()

status_popden_predicted_odds
```

This is an "odds ratio", meaning we care about how this number differs from 1. If it's greater than 1, then the odds increase when x increases. Conversely, if it's less than 1, then the odds decrease.

-   By how much does our model predict that the odds of `operating status` will change with each additional unit increase in population density?

```{r}
exp(status1$coefficients[2,'Estimate'])
```

**Answer:** Our model estimates that one unit increase in population density is associated with a change in the odds ratio of $e^(0.0001793) =1.000179$, or a 1.79e-04% increase in the odds of wind plant having an `operating` status.

### Logistic Model with 2 Continous Variables

$$ \text{status}\ = \beta_0 + \beta_1 \text{pop_den}\_i + \beta_2 \text{med_inc} + \varepsilon_i $$

-   Our summary table describes a null deviance 362.60.(1178 df) and residual deviance 359.84 (1176 df).

-   Additionally, it provides a p-value of 0.511 for $\beta_1$, indicating that the hypothesis here is accepted because it is greater than the significant value of 0.05.

-   The p-value of $\beta_2$, 0.957 is acceptable because it is above range of the significant value.

```{r}
status_2 <- glm(status ~ pop_den + med_inc,
               wind_us,
               family = 'binomial')
# Initial regression 2 betas for null
status2 <- summary(glm(status ~ pop_den + med_inc,
               wind_us,
               family = 'binomial'))

status2
```

#### Interpreting Coefficients using Odds Ratio

In a typical OLS model, we would intuitively want to assume the following from our model:

-   When wind turbines are operational, and all other variables are held constant at 0, the $\beta_0$ represents the estimated likelihood that status of a wind infrastructure plant is operating is \~ 4.03.

-   $\beta_1$ tells us there is an estimated decrease of 2.47e-4 in probability that status would be operating for the average unit increase in is_anti_wind opinion holders.

-   For every average unit increase in pop_den, $\beta_2$ predicts 1.50e-05 will increase the operating status, indicating pop_den is an extremely marginal influence, that may potentially be interacting with is_anti_wind outlook.

However, it's important to remember that we still need to exponentiate our estimated values in order to obtain our p-values. We're here to break the status quo and train our brains to interpret logistic regressions.

#### $$logit(p)=log( p / 1−p)=β0+β1x+ε$$

```{r}
# beta1 estimation exponentiated
exp(status2$coefficients[2,'Estimate'])
# beta2 estimation exponentiated
 1 - exp(status2$coefficients[3,'Estimate'])
```

By including the median income variable in our model and exponentiating the coefficients, we see a huge effect. Areas with an increase in population density observed an increase in their odds of having active wind infrastructure by a factor of 2.48e-04% when controlling the median income. However, the odds of operating status decrease by 1.5e-05 for each average unit increase in median income.

## Probabilistic Predictions

We are going to making some probability predictions using out-of-sample predictions using the `type.predict` argument set as "response", to retrieve fitted values on the familiar probability scale.

```{r}
# probability scale
probability_predictions <- augment(status_2, type.predict = "response") %>% 
  gt()

probability_predictions
```

For example, our model predicts the odds that an area with a population density of 124 and a median income of 46,094 and would have an operating wind plant is \~97%.

```{r}
exploring_model <- data.frame(pop_den = 124, med_inc = 46094)

augment(status_2, newdata = exploring_model, type.predict = "response") %>% 
  gt()
```

## Binary Predictions

#### Model Containing Binary Independent Variable

$$ \text{status}\ = \beta_0 + \beta_1 \text{pop_den}\_i + + \beta_2 \text{is_anti_wind} + \varepsilon_i $$

-   Our summary table describes a null deviance 362.60.(1178 df) and residual deviance 289.8 (1175 df).

-   Additionally, it provides a p-value of 0.819 for $\beta_1$, indicating that the hypothesis here is accepted because it is drastically smaller than the significant value of 0.05.

-   The p-value of $\beta_2$, 0.668 is acceptable because it is within range of the significant value.

```{r}
# Regression with 3 beta
# function
status_3 <- glm(status ~ pop_den + is_anti_wind, 
                       wind_us,
                       family = 'binomial')
# stored summary
status3 <- summary(glm(status ~ pop_den + is_anti_wind, 
                       wind_us,
                       family = 'binomial'))

status3
```

#### Interpreting Coefficients using Odds Ratio

So, after some manipulation, we find that the odds ratio gives us some good information.

-   Areas with an increase in population density observed an increase in their odds of having active wind infrastructure by a factor of 7.6e-05% when controlling the local opinion on wind constant. However, the odds of operating status decrease by \~7% for areas that identify as anti wind infrastructure.

```{r}
# beta1 estimation exponentiated
exp(status3$coefficients[2,'Estimate'])
# beta2 estimation exponentiated
 1 - exp(status3$coefficients[3,'Estimate'])
```

#### Table of Binary Predictions

What do these predictions tell us?

Well, they lend us some insight into whether or not we can definitively predict the status outcome of a region depending on their population density and position on wind opposition. They additionally provide the model fit ($R^2$) value associated with the predicted value.

```{r}
status_binary <- augment(status_3, type.predict = "response") %>%
    mutate(operating_hat = round(.fitted))
  
binary_predictions <- status_binary %>%
  dplyr::select(status, pop_den, is_anti_wind, .fitted, operating_hat) %>% 
  gt()

binary_predictions
```

#### Considering Omitted Variable Bias (OVB)

Neglecting additional variables without testing is bad practice. Exogeneity is a very difficult OLS assumption to uphold -- alongside a normal distribution of the error mean. A means to determine relationships between variables is running various linear regression models and comparing the $R^2$ value. In this project, we focused our attention on the why OLS was not the analysis method of choice for our relationships of interest. In the instance of logistic regression, a log odds ratio must be taken to interpret each individual variable. There is a strong possibility that the models utilized in this project are not exogenous and require deeper analysis to determine the impact of underlining influences.

### 

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--

if time allows

##### $$ \text{status}\ = \beta_0 + \beta_1 \text{pop_den}\_i + \beta_2 \text{median_age} + \beta_3 \text{pop_den * median_age} + \varepsilon_i $$When wind turbines are operational, and all other variables are held constant at 0, the $\beta_0$ represents the estimated likelihood that `status` of a wind infrastructure plant is `operating` is \~ `4.23`.$\beta_1$ tells us there is an estimated decrease of `2.81` in probability that status would be `operating` for the average unit increase in `is_anti_wind` opinion holders.For every average unit increase in `pop_den`, $\beta_2$ predicts `1.65e-04` will increase the `operating status`, indicating `pop_den` is an extremely marginal influence, that may potentially be interacting with `is_anti_wind` outlook.$\beta_3$ predicts `1.79e-05` will decrease the `operating status`, for an average unit increase in `med_inc`.$\beta_4$ estimates an increase of `2.73e-02` in the `operating status`, for each average unit increase in `med_age`.Our summary table describes a null deviance `362.60`.(`1178 df`) and residual deviance `289.02` (`1174 df`).Additionally, it provides a p-value of `9.17e-15` for $\beta_1$, indicating that the hypothesis here is rejected because it is drastically smaller than the `significant value of 0.05`.The p-value of $\beta_2$, `0.553` is acceptable because it is within range of the significant value.The p-value of $\beta_3$, `0.096` is acceptable because it is within range of the significant value.The p-value of $\beta_4$, \~`0.370` is acceptable because it is within range of the significant value.`{r}# Regression with interacting betastatus5 <- glm(status ~ pop_den + median_age + pop_den * median_age,                        wind_us,                       family = 'binomial')summary(status5)`
