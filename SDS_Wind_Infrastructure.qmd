---
title: "SPS_Wind_Infrastructre"
author: "Sofia Ingersoll"
format: html
editor: visual
---

In this documentation, the data utilized is the [US Wind Data](https://dataverse.harvard.edu/file.xhtml?fileId=7339850&version=1.0), this data is associated with the "Replication Data for: Prevalence and predictors of wind energy opposition in North America",Â <https://doi.org/10.7910/DVN/LE2V0R>, Harvard Dataverse, V1, 2023. The collaborators on that project include: Stokes, Leah; Franzblau, Emma; Lovering, Jessica R.; Miljanich, Chris.

\~ include more about what the data is about and the outcomes of making visualization \~

Analysis of these areas will provide insight into local resistance and spatially distorted signalling in relation to wind power infrastructure and climate policy.

### Loading Libraries

The following libraries were selected based on their functionality and ability to optimize our data for mapping.

```{r, message = FALSE}
# Loading Libraries
library(tidyverse)        # essential r package 
library(sf)               # package simplifies spatial dataframes
library(cowplot)
library(raster)
library(naniar)
library(tmap)
library(terra)
library(stars)
library(smoothr)          # aesthetic and visual aid for buffers created
```

### Read in the Data

To simplify the following step, it is important to organize your folders in a way that makes sense for your workflow. In many cases, the data sets we work with are typically too large to be uploaded to GitHub. As a result, a common practice is storing your data in a folder, directly outside of your repository in a folder labeled "data".

The code chunk below for `read.csv` demonstrates how to exit your current location using `..` and enter the desired folder location using `/`. It is important that your file path does not contain any spaces and is directly reflective of the file path for the data you wish to read in.

#### U.S. Wind Data

```{r}
# reading in & storing data
wind_data <- read.csv("../data/wind_data/wind_data_usa.csv")  
```

##### Confirm the Data Loaded Properly

```{r}
head(wind_data)                  # displays the first 6 rows of the data
                                 # along with all of the columns 
```

## Wrangling & Subsetting

### **Converting lat/long into Raster Data (i.e. sticky geometries)**

Below we will use the package `sf` to convert the lat/long data into a raster geometry column. In this single line, we will also be assigning the CRS EPSG:4326 to the sf data frame. Coordinate Reference Systems, CRS, are required in order for the data to be projected onto a map. The CRS was selected because it provides a relatively proportionate display of the United States. We are open to suggestions regarding our CRS if a different project better fits our data.

```{r}
wind_sf <- wind_data %>%             # calls desired dataset
  st_as_sf(coords = c("longitude", "latitude"), crs = 3857) 
                                     # creates geometry column with desired crs 

glimpse(crs(wind_sf))                  # output should reveal WGS84, EPSG:4326
```

#### Check-point

Let's stop and see if our outputs are what we expect.

Were the lat/long columns correctly converted into a geometry column?

`setdiff()` is a way to quickly determine the differences between two data sets.

```{r}
setdiff(colnames(wind_data), colnames(wind_sf))
setdiff(colnames(wind_sf), colnames(wind_data))
```

### Initial Visualization of the Data

Using the base R function `plot()`, we can see that the geometries stored by this data set correlate to the locations of wind infrastructure plants throughout the United States. In order to visualize these locations with respect to state and county jurisdictions, we'll need to utilize another data set to create a base layer for our map.

```{r}
# First visual of the U.S. wind data provided by the geometry points
plot(wind_sf$geometry)
```






# Multivariate Linear Regression Models

### Variables of interest:

| **Wind Infrastructure Attributes** | **Regional Attributes** | **Legislative Action** |
|------------------------------|---------------------|---------------------|
| n_turbs                            | med_inc                 | legislation_use        |
| status                             | is_anti_wind            | protesters_mean        |
| year                               | pop_den                 | courts_use             |
| total_mw                           | med_age                 | letters_use            |

An attribute from each column will be used to run several multivariate linear regression models. This is to assess the effects of socioeconmic/regional influences on wind infrastructure and the estimated likelihood of participating legislative action when living within a 3km proximity of a wind plant.

## Determining Variable Assignments for OLS

\*\*Question - do i need to adjust these variables? I want the binary variable to be `n_turbs`. This might be redundant though because we are only evaluating houses within turbine regions. In this case, `status` may be a better indicator of SDS because it could better reflect a response as a result of public response. However, as seen below, there are 7 possible outputs for `status` . Should i re-categorize these into two categories: operating and not operating?\*\*

```{r}
unique(wind_sf$status)     # displays unique values in this
```
### Need to reclassify column values

```{r}
# creating two categories: operating & not_operating
# We are removing 'Operating | Decommissioned' because it skews the data
unwanted_status <- "Operating | Decommissioned"
replacement_status <- "Uncertain Status"
wind_sf$status[wind_sf$status== unwanted_status]<-"Uncertain Status"  

# were we successful ?
unique(wind_sf$status)     # displays unique values in this

wind_sf <- wind_sf %>%
  filter(is.na(status) == 'FALSE')

# were we successful ?
unique(wind_sf$status)     # displays unique values in this

# if_else preserves the data type
wind_us <- wind_sf %>% 
  mutate(status = if_else(
    status %in% c('Cancelled', 'Out of service (temporarily)', 'Standby', 'Decommissioned', 'Uncertain Status'), 'not_operating',
    'operating') 
  )

# are our only outputs "operating" and "not_operating"?
print(unique(wind_us$status))

# status as factor and reassigned values
wind_us <- wind_us %>% 
  mutate(status = as.factor(wind_us$status)) %>% 
  mutate(status = if_else(
    status == 'not_operating', 0, 1
  )
)

wind_us <- wind_us %>% 
  mutatue(status = case_when(status == "operating" ~ 1,
            status == "not_operating" ~ 0))

# are our only outputs 0 or 1?
print(unique(wind_us$status))
```

Binary variable will be `is_anti_wind` column: `anti` is be 1, and `not_anti` will be 0.

#### Proposed Estimation Equations:

The first four equations estimate the likelihood of taking political action when considering a regions' wind turbine status, median income, and median age.

$$ \text{status}\ = \beta_0 + \beta_1 \text{is_anti_wind}\_i + + \beta_2 \text{med_inc} + \beta_3 \text{med_age} + \beta_4 \text{pop_den} + \varepsilon_i $$

$$ \text{status}\ = \beta_0 + \beta_1 \text{is_anti_wind}\_i + + \beta_2 \text{med_inc} + \beta_3 \text{med_age} + \beta_4 \text{pop_den}+ \beta_5 \text{n_turbs} + \varepsilon_i $$

$$ \text{status}\ = \beta_0 + \beta_1 \text{is_anti_wind}\_i + + \beta_2 \text{legislation_use }+ \beta_3 \text{med_inc} + \beta_4 \text{med_age} + \beta_5 \text{pop_den} + \varepsilon_i $$

$$ \text{status}\ = \beta_0 + \beta_1 \text{is_anti_wind}\_i + + \beta_2 \text{courts_use } + \beta_3 \text{med_inc} + \beta_4 \text{med_age} + \beta_5 \text{pop_den} + \varepsilon_i $$

$$ \text{status}\ = \beta_0 + \beta_1 \text{is_anti_wind}\_i + + \beta_2 \text{courts_use }+ \beta_3 \text{med_inc} + \beta_4 \text{med_age} + \beta_5 \text{pop_den} + \varepsilon_i $$

$$ \text{status}\ = \beta_0 + \beta_1 \text{is_anti_wind}\_i + + \beta_2 \text{letters_use }+ \beta_3 \text{med_inc} + \beta_4 \text{med_age} + \beta_5 \text{pop_den} + \varepsilon_i $$
## GLM Linear Regressions with Binomial Family

The production of negative coefficents from a binomial linear regression indicates the potential need to transform the data using the logarithmic funciton. Before doing this, I would like to see a visual observation of the data distribution using a histogram.

```{r}
# Inital regression 1 betas for null
status1 <- glm(status ~ is_anti_wind ,
               wind_us,
               family = 'binomial')
#glimpse(status1)
summary(status1)
```

### Visualizing Data Distribution
```{r}
wind_vis <- wind_data |>
    mutate(status_factor = factor(status))

ggplot(data = wind_vis, aes(x = is_anti_wind,
                            fill = status,
                            label = ..count..)) +
    geom_histogram() +
  stat_count(breaks = c(0,1),
             binwidth = 1, 
             geom = 'text', 
             color = 'black',
     position = position_stack(vjust = 0.8)) 


ggplot(data = wind_vis, aes(x = is_anti_wind, fill = status_factor)) +
    geom_histogram()
```

### Visualizing Binary Variables
```{r}
anti_wind_hist <- ggplot(data = wind_us,
                         aes(x = is_anti_wind)) + 
  geom_histogram(stat = "count",
                 fill="plum") +
  stat_count(binwidth = 1, 
             geom = 'text', 
             color = 'white', 
             aes(label = ..count..),
     position = position_stack(vjust = 0.5)) +
  theme_bw() + theme(
  line = element_blank(),
  panel.grid = element_blank(),
  rect = element_blank(),
  strip.text = element_blank(),
  axis.text.x = element_text(size = 14),
  axis.text.y = element_blank(),
  legend.position = "none") +
  labs(x = "Is Anti Wind Opinion Distribution") 

anti_wind_hist

status_hist <- ggplot(data = wind_us,
                      aes(x = status)) + 
  geom_histogram(stat = "count",
                 fill = "seagreen") +
  stat_count(binwidth = 1, 
             geom = 'text', 
             color = 'white', 
             aes(label = ..count..),
             position = position_stack(vjust = 0.5)) +
  theme_bw() + 
  theme(
    line = element_blank(),
    panel.grid = element_blank(),
    rect = element_blank(),
    strip.text = element_blank(),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_blank(),
    legend.position = "none") +
  labs(x = "Wind Infrastructure Operation Status Distribution") 

status_hist
plot_grid(anti_wind_hist, status_hist)
```
#### Q-Q Plot
The histograms and summary statistics should make you concerned that these data are not normally distributed. As we will show later in the course, itâs often very helpful to have normally distributed data before we do things like linear regressions or hypothesis testing. Here, letâs use a Q-Q plot to assess the normality of our sample data.

```{r}
anti_qq <- ggplot(data = wind_us) +
  geom_qq(aes(sample = is_anti_wind),
          color = "plum",
          size = 3) +
  geom_qq_line(aes(sample = is_anti_wind),
               color="grey") +
  xlab("Normal distribution quantiles") +
  ylab("Sample quantiles") +
  theme_bw() + 
  theme(
    line = element_blank(),
    panel.grid = element_blank(),
    rect = element_blank(),
    strip.text = element_blank(),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.title = element_text(size=10, 
                              face="bold"),
    plot.title = element_blank(),
    legend.position = "none")

status_qq <- ggplot(data = wind_us) +
  geom_qq(aes(sample = status),
          color = "seagreen",
          size=3) +
  geom_qq_line(aes(sample = status),
               color="grey") +
  xlab("Normal distribution quantiles") +
  ylab("Sample quantiles") + 
  theme_bw() + 
  theme(
    line = element_blank(),
    panel.grid = element_blank(),
    rect = element_blank(),
    strip.text = element_blank(),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.title = element_text(size=10,face="bold"),
    plot.title = element_blank(),
    legend.position = "none")

plot_grid(anti_qq, status_qq)
```


```{r}
status_factor_qq <- ggplot(data = wind_data) +
  geom_qq(aes(sample = status),
          color = "seagreen",
          size=3) +
  geom_qq_line(aes(sample = status),
               color="grey") +
  xlab("Normal distribution quantiles") +
  ylab("Sample quantiles") + 
  theme_bw() + 
  theme(
    line = element_blank(),
    panel.grid = element_blank(),
    rect = element_blank(),
    strip.text = element_blank(),
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.title = element_text(size=10,face="bold"),
    plot.title = element_blank(),
    legend.position = "none")

status_factor_qq
```


## Logit

```{r}

```

## Log Odds

```{r}

```


### Assessing Omitted Variables Bias in OLS 
```{r}
# Inital regression 2 betas for null
#status2 <- glm(status ~ is_anti_wind + pop_den,
 #              wind_us,
#               family = 'binomial')
#glimpse(status2)
#summary(status2)


# Regression with 3 beta
#status3 <- glm(status ~ is_anti_wind + pop_den + med_inc, 
 #              wind_us,
  #             family = 'binomial')
#glimpse(status3)
#summary(status3)


# Regression with 4
#status4 <- glm(status ~ is_anti_wind + pop_den + med_inc + median_age, 
 #              wind_us,
  #             family = 'binomial')
#glimpse(status4)
#summary(status4)

```

## Interpreting Omitted Variable Bias (OVB)

Comparing the corrected $$R^2$$ values in each of the models provided below will assist in the determination of including an additional variable to our



